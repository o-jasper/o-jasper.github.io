shared:
    // Based on longest command length, "puppeteer". 2**(256-9*8) == 2**184 ==
    STRIP = 24519928653854221733733552434404946937899825954937634816
init:
    contract.storage["owner"] = msg.sender
code:
    commit_release = contract.storage["commit_release"]
    //Time ran out, end commitment.
    if commit_release && block.timestamp >= commit_release/STRIP:
        contract.storage["commit"] = 0
        contract.storage["commit_release"] = 0
        commit_release = 0
        
    // Passes along a transaction.
    if msg.data[0]/STRIP == 2074497723536345752946: //"puppeteer":
        i = 1
        args = array(msg.datasize-1)
        while i < msg.datasize:
            args[i-1] = msg.data[i]
            i = i + 1
        // _Anyone_ may trigger the transaction.. *Assumes* `msg.origin` doesnt matter!
        // Also allows more people to mess in here..
        // (perhaps having a specific counterparty might be wise..)
        if commit_release != 0:
            //Still require hash check.
            if sha3(msg.data[0]%STRIP)%STRIP != contract.storage["commit"]%STRIP:
                return("commit hash wrong")
            if sha3(args, msg.datasize-1)%STRIP != commit_release%STRIP:
                return("tx hash wrong")
            // It has been ensured that the committed transaction is done.
            contract.storage["commit"] = 0  // May now do preparatory again.
            contract.storage["commit_release"] = 0
            // ... and continue to do the message sending.
        else:
            // Preparatory puppeteering only by owner. (cant be done after committing.)
            if msg.sender != contract.storage["owner"]:
                return("not committed")

        i = 3  // Have to shift it... alternatives not working.
        while i < msg.datasize:
            args[i-3] = msg.data[i]
            i = i + 1

        return(msg(tx.gas-100, msg.data[1], msg.data[2], args, msg.datasize-3))
        // (doing that manually because the 2: apparently not working)        
        //call(tx.gas - 100, msg.data[1], msg.data[2], (+ (ref args) 0x40), 0x20*msg.datasize - 0x40, (ref i), 0x20)
    
    if msg.sender != contract.storage["owner"]:
        return("denied")
    
    // Committing to transaction.
    if msg.data[0]/STRIP == 1834256857307602223104: // "commit", but it is different somehow.
        if msg.datasize != 2:
            return("commit invalid args")            
        if commit_release != 0:
            return("already committed")
        contract.storage["commit"] = msg.data[0]%STRIP
        // Release two parts, %STRIP the committing hash,
        // /STRIP, the time beyond which it may be revoked.
        contract.storage["commit_release"] = msg.data[1]
        return("committed")

    return("invalid")
