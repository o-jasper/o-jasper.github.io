// Pays out if funds are reached, otherwise refunds.
// 'kickstarter'/indiegogo like.

// NOTE: would be nice to suicide the contract with return value and message sending?
// Or reset.
shared:
    CREATOR = 0
    RECIPIENT = 1
    ENDTIME = 2
    MIN = 3
    MAX = 4    
    CUR_I = 5
    FROM_I = 6
init:
    contract.storage[CREATOR] = msg.sender
//    contract.storage[RECIPIENT] = msg.sender //Recipient of true result.
//    contract.storage[ENDTIME] = 10     // End time.
//    contract.storage[MIN] = 20000  // Amount needed.
//    contract.storage[MAX] = 30000  // Max amount we can deal with.
    contract.storage[CUR_I] = FROM_I
code:
    if msg.datasize == 5: // Initialization.
        if msg.sender != contract.storage[CREATOR]:
            return("not creator")
        if contract.storage[RECIPIENT] != 0:
            return("already init")    
        contract.storage[CREATOR]   = msg.data[0]
        contract.storage[RECIPIENT] = msg.data[1]
        contract.storage[ENDTIME] = msg.data[2] 
        contract.storage[MIN] = msg.data[3]
        contract.storage[MAX] = msg.data[4]
        return("initiated")

    if contract.storage[RECIPIENT] == 0:
        return("not ready")
    
    if msg.datasize == 1: // Provide info about self.
        if msg.data[0] == "balance":
            return(contract.balance)
        if msg.data[0] == "endtime":
            return(contract.storage[ENDTIME])
        if msg.data[0] == "min":
            return(contract.storage[MIN])
        if msg.data[0] == "max":
            return(contract.storage[MAX])
        if msg.data[0] == "cnt":
            return((contract.storage[CUR_I] - FROM_I)/2)

    if msg.datasize == 2:
        if msg.data[0] == "funder":
            contract.storage[msg.data[1]]

    refund = 0  // Note: less than optimal.. Better if there was a refund function..
    
    if block.timestamp > contract.storage[ENDTIME]: //Ran out of time. //TODO use time instead.
        if msg.value > 0:
            msg(tx.gas - 100, msg.sender, msg.value, "too late")

        if contract.balance > contract.storage[MIN]: //More than enough paid.
            msg(tx.gas - 100, contract.storage[RECIPIENT], contract.balance, "funded")
            //suicide(r)  // Not sure if it receives a message, hence the message.
            return("funded")
        else: //Too little paid.
            refund = 2
    
    if !refund:
        if msg.sender == contract.storage[CREATOR]: //Owner telling it to refund.
            if msg.datasize == 1 and msg.data[0] == "refund":
                refund = 1
        else:  //Someone paying to it. (Adding to list)
            // Over what we want to accept.
            // (NOTE: balance at this point already got the value)
            if contract.balance > contract.storage[MAX]:
                msg(tx.gas - 100, msg.sender, msg.value, "overpaid")
                return("overpaid" ) //(and refunded)
            i = contract.storage[CUR_I]
            contract.storage[i]     = msg.sender
            contract.storage[i + 1] = msg.value
            contract.storage[CUR_I] = i + 2
            return("paid")

    if refund: //Refunding.
        i = FROM_I
        t = contract.storage[CUR_I]
        while i < t //contract.storage[i]:
            msg(tx.gas - 100, contract.storage[i], contract.storage[i + RECIPIENT], "")
            i = i + 2
        // NOTE: at this point _MUST_ have i == contract.storage[CUR_I]
        // suicide(contract.storage[CREATOR])
        if refund == 2:
            return("underfunded")
        if refund == 1:
            return("refunded")
        return("refunded, unknown")
    return("error?!")
